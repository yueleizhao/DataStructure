
/*
  冒泡排序算法的运作如下：

1、比较相邻的元素，如果前一个比后一个大，就把它们两个调换位置。
2、对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。
3、针对所有的元素重复以上的步骤，除了最后一个。
4、持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。
*/
#include <iostream>

// 分类 -------------- 内部比较排序
// 数据结构 ---------- 数组
// 最差时间复杂度 ---- O(n^2)
// 最优时间复杂度 ---- 如果能在内部循环第一次运行时,使用一个旗标来表示有无需要交换的可能,可以把最优时间复杂度降低到O(n)
// 平均时间复杂度 ---- O(n^2)
// 所需辅助空间 ------ O(1)
// 稳定性 ------------ 稳定

void Swap(int A[], int i, int j)
{
	int temp = A[i];
	A[i] = A[j];
	A[j] = temp;
}

void BubbleSort(int A[], int n)
{
	int i, j;
	for (j = 0; j < n - 1; j++)            // 每次最大元素就像气泡一样"浮"到数组的最后
	{
		bool flag = false;                 //表示本趟冒泡是否发生交换的标志 

		for (i = 0; i < n - 1 - j; i++)    // 依次比较相邻的两个元素,使较大的那个向后移
		{
			if (A[i] > A[i + 1])            // 如果条件改成A[i] >= A[i + 1],则变为不稳定的排序算法
			{
				Swap(A, i, i + 1);
				flag = true;

			}
		}
		if (flag == false)
			break;						      //本趟遍历后没有发生交换，表明已经有序 
	}
}

int main()
{
	int A[] = { 6, 5, 3, 1, 8, 7, 2, 4 };    // 从小到大冒泡排序6, 5, 3, 1, 8, 7, 2, 4
	int n = sizeof(A) / sizeof(int);
	BubbleSort(A, n);
	printf("冒泡排序结果:");
	int i;
	for (i = 0; i < n; i++)
	{
		printf("%d ", A[i]);
	}
	printf("\n");
	return 0;
}

/*
 * 尽管冒泡排序是最容易了解和实现的排序算法之一，但它对于少数元素之外的数列排序是很没有效率的。
 */
